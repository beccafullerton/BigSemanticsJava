package ecologylab.semantics.metadata.builtins.declarations;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2012) Interface Ecology Lab.
 */

import ecologylab.semantics.metadata.builtins.Clipping;
import ecologylab.semantics.metadata.builtins.CompoundDocument;
import ecologylab.semantics.metadata.builtins.Document;
import ecologylab.semantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.semantics.metadata.mm_name;
import ecologylab.semantics.metadata.scalar.MetadataString;
import ecologylab.semantics.metametadata.MetaMetadataCompositeField;
import ecologylab.semantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.Hint;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_hints;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import ecologylab.serialization.annotations.simpl_scope;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class CompoundDocumentDeclaration extends Document
{
	/** 
	 *For debugging. Type of the structure recognized by information extraction.
	 */ 
	@simpl_scalar
	private MetadataString pageStructure;

	/** 
	 *The search query
	 */ 
	@simpl_scalar
	@simpl_hints({Hint.XML_LEAF})
	private MetadataString query;

	/** 
	 *Clippings that this document contains.
	 */ 
	@simpl_collection
	@simpl_scope("repository_clippings")
	@mm_name("clippings")
	private List<Clipping> clippings;

	@simpl_composite
	@mm_name("root_document")
	private CompoundDocument rootDocument;

	public CompoundDocumentDeclaration()
	{ super(); }

	public CompoundDocumentDeclaration(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataString	pageStructure()
	{
		MetadataString	result = this.pageStructure;
		if (result == null)
		{
			result = new MetadataString();
			this.pageStructure = result;
		}
		return result;
	}

	public String getPageStructure()
	{
		return this.pageStructure == null ? null : pageStructure().getValue();
	}

	public MetadataString getPageStructureMetadata()
	{
		return pageStructure;
	}

	public void setPageStructure(String pageStructure)
	{
		if (pageStructure != null)
			this.pageStructure().setValue(pageStructure);
	}

	public void setPageStructureMetadata(MetadataString pageStructure)
	{
		this.pageStructure = pageStructure;
	}

	public MetadataString	query()
	{
		MetadataString	result = this.query;
		if (result == null)
		{
			result = new MetadataString();
			this.query = result;
		}
		return result;
	}

	public String getQuery()
	{
		return this.query == null ? null : query().getValue();
	}

	public MetadataString getQueryMetadata()
	{
		return query;
	}

	public void setQuery(String query)
	{
		if (query != null)
			this.query().setValue(query);
	}

	public void setQueryMetadata(MetadataString query)
	{
		this.query = query;
	}

	public List<Clipping> getClippings()
	{
		return clippings;
	}

  // lazy evaluation:
  public List<Clipping> clippings()
  {
    if (clippings == null)
      clippings = new ArrayList<Clipping>();
    return clippings;
  }

  // addTo:
  public void addToClippings(Clipping element)
  {
    clippings().add(element);
  }

  // size:
  public int clippingsSize()
  {
    return clippings == null ? 0 : clippings.size();
  }

	public void setClippings(List<Clipping> clippings)
	{
		this.clippings = clippings;
	}

	public CompoundDocument getRootDocument()
	{
		return rootDocument;
	}

	public void setRootDocument(CompoundDocument rootDocument)
	{
		this.rootDocument = rootDocument;
	}
}
