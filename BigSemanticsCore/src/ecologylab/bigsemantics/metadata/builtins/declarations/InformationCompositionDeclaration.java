package ecologylab.bigsemantics.metadata.builtins.declarations;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2012) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.metadata.Metadata;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.builtins.Clipping;
import ecologylab.bigsemantics.metadata.builtins.Document;
import ecologylab.bigsemantics.metadata.scalar.MetadataFloat;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import ecologylab.serialization.annotations.simpl_scope;
import java.lang.Float;
import java.util.ArrayList;
import java.util.List;

@simpl_inherit
public class InformationCompositionDeclaration extends Document
{
	@simpl_collection
	@simpl_scope("repository_no_annotations")
	@mm_name("metadata")
	private List<Metadata> metadata;

	/** 
	 *for compatability w old compositions -- do not use!
	 */ 
	@simpl_collection
	@simpl_scope("repository_clippings")
	@mm_name("clippings")
	private List<Clipping> clippings;

	/** 
	 *for compatability w old compositions -- do not use!
	 */ 
	@simpl_collection
	@simpl_scope("repository_media")
	@mm_name("media")
	private List<Metadata> media;

	@simpl_scalar
	private MetadataFloat version;

	@simpl_scalar
	private MetadataFloat metadataVersion;

	public InformationCompositionDeclaration()
	{ super(); }

	public InformationCompositionDeclaration(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Metadata> getMetadata()
	{
		return metadata;
	}

  // lazy evaluation:
  public List<Metadata> metadata()
  {
    if (metadata == null)
      metadata = new ArrayList<Metadata>();
    return metadata;
  }

  // addTo:
  public void addToMetadata(Metadata element)
  {
    metadata().add(element);
  }

  // size:
  public int metadataSize()
  {
    return metadata == null ? 0 : metadata.size();
  }

	public void setMetadata(List<Metadata> metadata)
	{
		this.metadata = metadata;
	}
	
	public List<Clipping> getClippings()
	{
		return clippings;
	}

  // lazy evaluation:
  public List<Clipping> clippings()
  {
    if (clippings == null)
      clippings = new ArrayList<Clipping>();
    return clippings;
  }

  // addTo:
  public void addToClippings(Clipping element)
  {
    clippings().add(element);
  }

  // size:
  public int clippingsSize()
  {
    return clippings == null ? 0 : clippings.size();
  }

	public void setClippings(List<Clipping> clippings)
	{
		this.clippings = clippings;
	}

	public List<Metadata> getMedia()
	{
		return media;
	}

  // lazy evaluation:
  public List<Metadata> media()
  {
    if (media == null)
      media = new ArrayList<Metadata>();
    return media;
  }

  // addTo:
  public void addToMedia(Metadata element)
  {
    media().add(element);
  }

  // size:
  public int mediaSize()
  {
    return media == null ? 0 : media.size();
  }

	public void setMedia(List<Metadata> media)
	{
		this.media = media;
	}

	public MetadataFloat	version()
	{
		MetadataFloat	result = this.version;
		if (result == null)
		{
			result = new MetadataFloat();
			this.version = result;
		}
		return result;
	}

	public Float getVersion()
	{
		return this.version == null ? 0 : version().getValue();
	}

	public MetadataFloat getVersionMetadata()
	{
		return version;
	}

	public void setVersion(Float version)
	{
		if (version != 0)
			this.version().setValue(version);
	}

	public void setVersionMetadata(MetadataFloat version)
	{
		this.version = version;
	}

	public MetadataFloat	metadataVersion()
	{
		MetadataFloat	result = this.metadataVersion;
		if (result == null)
		{
			result = new MetadataFloat();
			this.metadataVersion = result;
		}
		return result;
	}

	public Float getMetadataVersion()
	{
		return this.metadataVersion == null ? 0 : metadataVersion().getValue();
	}

	public MetadataFloat getMetadataVersionMetadata()
	{
		return metadataVersion;
	}

	public void setMetadataVersion(Float metadataVersion)
	{
		if (metadataVersion != 0)
			this.metadataVersion().setValue(metadataVersion);
	}

	public void setMetadataVersionMetadata(MetadataFloat metadataVersion)
	{
		this.metadataVersion = metadataVersion;
	}
}
