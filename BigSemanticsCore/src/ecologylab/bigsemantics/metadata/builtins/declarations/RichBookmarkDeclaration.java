package ecologylab.bigsemantics.metadata.builtins.declarations;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2013) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.metadata.Metadata;
import ecologylab.bigsemantics.metadata.builtins.Document;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichArtifact;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class RichBookmarkDeclaration<M extends Metadata> extends RichArtifact<M>
{
	@simpl_collection("document")
	@mm_name("outlinks")
	private List<Document> outlinks;

	public RichBookmarkDeclaration()
	{ super(); }

	public RichBookmarkDeclaration(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Document> getOutlinks()
	{
		return outlinks;
	}

  // lazy evaluation:
  public List<Document> outlinks()
  {
    if (outlinks == null)
      outlinks = new ArrayList<Document>();
    return outlinks;
  }

  // addTo:
  public void addToOutlinks(Document element)
  {
    outlinks().add(element);
  }

  // size:
  public int outlinksSize()
  {
    return outlinks == null ? 0 : outlinks.size();
  }

	public void setOutlinks(List<Document> outlinks)
	{
		this.outlinks = outlinks;
	}
}
