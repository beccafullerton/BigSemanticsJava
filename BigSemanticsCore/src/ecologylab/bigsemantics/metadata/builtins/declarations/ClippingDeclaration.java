package ecologylab.bigsemantics.metadata.builtins.declarations;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2013) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.metadata.Metadata;
import ecologylab.bigsemantics.metadata.builtins.Document;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.Hint;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_hints;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import ecologylab.serialization.annotations.simpl_scope;
import ecologylab.serialization.annotations.simpl_wrap;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class ClippingDeclaration extends Metadata
{
	@simpl_scalar
	private MetadataString context;

	@simpl_scalar
	@simpl_hints({Hint.XML_LEAF_CDATA})
	private MetadataString contextHtml;

	@simpl_scalar
	private MetadataString xpath;

	@simpl_composite
	@simpl_wrap
	@simpl_scope("repository_documents")
	@mm_name("source_doc")
	private Document sourceDoc;

	@simpl_collection
	@simpl_scope("repository_documents")
	@mm_name("outlinks")
	private List<Document> outlinks;

	public ClippingDeclaration()
	{ super(); }

	public ClippingDeclaration(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataString	context()
	{
		MetadataString	result = this.context;
		if (result == null)
		{
			result = new MetadataString();
			this.context = result;
		}
		return result;
	}

	public String getContext()
	{
		return this.context == null ? null : context().getValue();
	}

	public MetadataString getContextMetadata()
	{
		return context;
	}

	public void setContext(String context)
	{
		if (context != null)
			this.context().setValue(context);
	}

	public void setContextMetadata(MetadataString context)
	{
		this.context = context;
	}

	public MetadataString	contextHtml()
	{
		MetadataString	result = this.contextHtml;
		if (result == null)
		{
			result = new MetadataString();
			this.contextHtml = result;
		}
		return result;
	}

	public String getContextHtml()
	{
		return this.contextHtml == null ? null : contextHtml().getValue();
	}

	public MetadataString getContextHtmlMetadata()
	{
		return contextHtml;
	}

	public void setContextHtml(String contextHtml)
	{
		if (contextHtml != null)
			this.contextHtml().setValue(contextHtml);
	}

	public void setContextHtmlMetadata(MetadataString contextHtml)
	{
		this.contextHtml = contextHtml;
	}

	public MetadataString	xpath()
	{
		MetadataString	result = this.xpath;
		if (result == null)
		{
			result = new MetadataString();
			this.xpath = result;
		}
		return result;
	}

	public String getXpath()
	{
		return this.xpath == null ? null : xpath().getValue();
	}

	public MetadataString getXpathMetadata()
	{
		return xpath;
	}

	public void setXpath(String xpath)
	{
		if (xpath != null)
			this.xpath().setValue(xpath);
	}

	public void setXpathMetadata(MetadataString xpath)
	{
		this.xpath = xpath;
	}

	public Document getSourceDoc()
	{
		return sourceDoc;
	}

	public void setSourceDoc(Document sourceDoc)
	{
		this.sourceDoc = sourceDoc;
	}

	public List<Document> getOutlinks()
	{
		return outlinks;
	}

  // lazy evaluation:
  public List<Document> outlinks()
  {
    if (outlinks == null)
      outlinks = new ArrayList<Document>();
    return outlinks;
  }

  // addTo:
  public void addToOutlinks(Document element)
  {
    outlinks().add(element);
  }

  // size:
  public int outlinksSize()
  {
    return outlinks == null ? 0 : outlinks.size();
  }

	public void setOutlinks(List<Document> outlinks)
	{
		this.outlinks = outlinks;
	}
}
